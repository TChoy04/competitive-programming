// tc n*m
//sc n*m
class Solution {
public:
/*
use bfs branching from outside O's to find everything that can be accessed and then mark it as accessibile. if it is not accessible, turn it into an X

[["X","X","X","O"],
["O","O","O","O"],
["X","X","O","O"],
["X","O","X","O"]]
*/
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<bool>>possible(n,vector<bool>(m,false)); 
        queue<pair<int,int>>bfs;
        for(int i = 0; i<n; i++){
            if(board[i][0] =='O'){
                bfs.push({i,0});
                possible[i][0] = true;
            }if(board[i][m-1]=='O'){
                bfs.push({i,m-1});
                possible[i][m-1] = true;
            }
        }
        for(int i = 0; i<m; i++){
            if(board[0][i]=='O'){
                bfs.push({0,i});
                possible[0][i] = true;
            }
            if(board[n-1][i]=='O'){
                bfs.push({n-1,i});
                possible[n-1][i] = true;
            }
        }
        vector<vector<int>>directions = {{0,1},{1,0},{-1,0},{0,-1}};
        while(bfs.size()){
            int i = bfs.front().first;
            int j = bfs.front().second;
            for(int k = 0; k<4; k++){
                int newI = i+directions[k][0];
                int newJ = j+directions[k][1];
                if(newI>=0 && newJ>=0 && newI<n && newJ<m && board[newI][newJ]=='O' && possible[newI][newJ]==false){
                    possible[newI][newJ] = true;
                    bfs.push({newI,newJ});
                }
            }
            bfs.pop();
        }
        for(int i = 0; i<n-1; i++){
            for(int j = 0; j<m-1; j++){
                if(possible[i][j]==false){
                    board[i][j] = 'X';
                }
            }
        }
    }
};
