/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    Node* helper(vector<vector<int>>&grid, int startR, int startC, int r, int c){
        int curr = grid[startR][startC];
        int midR = (startR + r) / 2;
        int midC = (startC + c) / 2;
        for(int i = startR; i<r; i++){
            for(int j = startC; j<c; j++){
                if(grid[i][j]!=curr){
                    Node* tl = helper(grid,startR,startC,midR,midC);
                    Node* bl = helper(grid,midR,startC,r,midC);
                    Node* tr = helper(grid,startR,midC,midR,c);
                    Node* br = helper(grid,midR,midC,r,c);
                    return new Node(curr,false,tl,tr,bl,br);
                }
            }
        }
        return new Node(curr,true);
    }
    Node* construct(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        return helper(grid,0,0,r,c);
    }
};
